version: '3.6'

networks:
  default:
    driver: bridge
    ipam:
      driver: default

services:
  node_exporter:
    container_name: node_exporter
    image: prom/node-exporter
    ports:
      - "9100:9100"
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host
      - --collector.filesystem.ignored-mount-points
      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /:/host:ro,rslave
    restart: unless-stopped

  volume_creator:
    container_name: volume_creator
    image: busybox
    command: >
      sh -c "mkdir -p
      ./volumes/grafana
      ./volumes/mosquitto/config
      ./volumes/influxdb
      ./volumes/prometheus
      ./volumes/postgres
      ./config/grafana/provisioning/dashboards
      ./config/grafana/provisioning/datasources"
    volumes:
    - ./volumes:/volumes

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.1
    container_name: cadvisor
    privileged: true
    ports:
      - 8081:8080
    devices:
      - /dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /etc/machine-id:/etc/machine-id:ro
    command:
      - '--housekeeping_interval=15s'
      - '--docker_only=true'
      - '--disable_metrics=disk,network,tcp,udp,percpu,sched,process'
    restart: unless-stopped

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./volumes/prometheus:/etc/prometheus
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: unless-stopped

  grafana:
    container_name: grafana
    image: grafana/grafana
    user: "0"
    ports:
    - "3000:3000"
    environment:
    - TZ=Etc/UTC
    - GF_PATHS_DATA=/var/lib/grafana
    - GF_PATHS_LOGS=/var/log/grafana
    volumes:
    - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    - ./config/grafana/provisioning:/etc/grafana/provisioning
    - ./volumes/grafana/data:/var/lib/grafana
    - ./volumes/grafana/log:/var/log/grafana
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
    - volume_creator
    restart: unless-stopped

  influxdb:
    container_name: influxdb
    image: "influxdb:1.8"
    ports:
    - "8086:8086"
    environment:
    - TZ=Etc/UTC
    - INFLUXDB_HTTP_FLUX_ENABLED=false
    - INFLUXDB_REPORTING_DISABLED=false
    - INFLUXDB_HTTP_AUTH_ENABLED=false
    - INFLUXDB_MONITOR_STORE_ENABLED=FALSE
    volumes:
    - ./volumes/influxdb/data:/var/lib/influxdb
    - ./backups/influxdb/db:/var/lib/influxdb/backup
    healthcheck:
      test: ["CMD", "curl", "http://localhost:8086"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
    - volume_creator
    restart: unless-stopped

  mosquitto:
    container_name: mosquitto
    image: eclipse-mosquitto:latest
    environment:
    - TZ=Etc/UTC
    ports:
    - "1883:1883"
    volumes:
    - ./config/mosquitto:/mosquitto/config
    - ./volumes/mosquitto/data:/mosquitto/data
    - ./volumes/mosquitto/log:/mosquitto/log
    - ./volumes/mosquitto/pwfile:/mosquitto/pwfile
    depends_on:
    - volume_creator
    restart: unless-stopped

  wireguard:
    image: linuxserver/wireguard:latest
    container_name: wireguard
    cap_add:
      - NET_ADMIN
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Atlantic/Canary
      - SERVERULR=auto
      - PEERS=peers1,peers2
      - PEERDNS=auto
      - ALLOWEDIPS=0.0.0.0/0
      - LOG_CONFS=true
    volumes:
      - ./volumes/wireguard/config:/wireguard/config
      - /lib/modules:/lib/modules
    ports:
      - 51820:51820/udp
    restart: unless-stopped
    depends_on:
    - volume_creator

  duckdns:
    image: lscr.io/linuxserver/duckdns:latest
    container_name: duckdns
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - SUBDOMAINS=labcrist
      - TOKEN=${DUCKDNS_TOKEN}
      - LOG_FILE=true
    volumes:
      - ./volumes/duckdns/config:/duckdns/config
    restart: unless-stopped
    depends_on:
    - volume_creator